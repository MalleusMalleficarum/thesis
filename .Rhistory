temp <- aggregate(nonevolutionary$connectivity, by=list(nonevolutionary$name),min)
temp1 <-aggregate(random_combine$connectivity, by=list(random_combine$name), min)
temp <- plyr::rename(temp, c("x" = "nonevo"))
temp1 <- plyr::rename(temp1, c("x" = "C1C2"))
result <- merge(temp, temp1)
result$maxdiff <- result$nonevo - result$C1C2
a <- sum(result$maxdiff)/75
b <- geoMean(result$nonevo)
a / b
library(coin)
wilcoxsign_test(result$nonevo ~
result$C1C2)
source("/home/andre/server-home/temppap/R/plot_functions.R")
source("/home/andre/server-home/temppap/R/final_preprocessing.R")
newip_10percent = read.csv(file="/home/andre/server-home/Hypergraphs/unicluster_results_after_paper/newip_tuning/10_clean.txt", header=TRUE, sep=" ")
newip_20percent = read.csv(file="/home/andre/server-home/Hypergraphs/unicluster_results_after_paper/newip_tuning/20_clean.txt", header=TRUE, sep=" ")
newip_30percent = read.csv(file="/home/andre/server-home/Hypergraphs/unicluster_results_after_paper/newip_tuning/30_clean.txt", header=TRUE, sep=" ")
newip_40percent = read.csv(file="/home/andre/server-home/Hypergraphs/unicluster_results_after_paper/newip_tuning/40_clean.txt", header=TRUE, sep=" ")
newip_50percent = read.csv(file="/home/andre/server-home/Hypergraphs/unicluster_results_after_paper/newip_tuning/50_clean.txt", header=TRUE, sep=" ")
newip_60percent = read.csv(file="/home/andre/server-home/Hypergraphs/unicluster_results_after_paper/newip_tuning/60_clean.txt", header=TRUE, sep=" ")
newip_70percent = read.csv(file="/home/andre/server-home/Hypergraphs/unicluster_results_after_paper/newip_tuning/70_clean.txt", header=TRUE, sep=" ")
newip_80percent = read.csv(file="/home/andre/server-home/Hypergraphs/unicluster_results_after_paper/newip_tuning/80_clean.txt", header=TRUE, sep=" ")
newip_90percent = read.csv(file="/home/andre/server-home/Hypergraphs/unicluster_results_after_paper/newip_tuning/90_clean.txt", header=TRUE, sep=" ")
newip_100percent = read.csv(file="/home/andre/server-home/Hypergraphs/unicluster_results_after_paper/newip_tuning/100_clean.txt", header=TRUE, sep=" ")
edge_10percent =  read.csv(file="/home/andre/server-home/Hypergraphs/unicluster_results_after_paper/edge-chance-tuning/10percent_clean.txt", header=TRUE, sep=" ")
edge_20percent =  read.csv(file="/home/andre/server-home/Hypergraphs/unicluster_results_after_paper/edge-chance-tuning/20percent_clean.txt", header=TRUE, sep=" ")
edge_30percent =  read.csv(file="/home/andre/server-home/Hypergraphs/unicluster_results_after_paper/edge-chance-tuning/30percent_clean.txt", header=TRUE, sep=" ")
edge_40percent =  read.csv(file="/home/andre/server-home/Hypergraphs/unicluster_results_after_paper/edge-chance-tuning/40percent_clean.txt", header=TRUE, sep=" ")
edge_50percent =  read.csv(file="/home/andre/server-home/Hypergraphs/unicluster_results_after_paper/edge-chance-tuning/50percent_clean.txt", header=TRUE, sep=" ")
edge_60percent =  read.csv(file="/home/andre/server-home/Hypergraphs/unicluster_results_after_paper/edge-chance-tuning/60percent_clean.txt", header=TRUE, sep=" ")
edge_70percent =  read.csv(file="/home/andre/server-home/Hypergraphs/unicluster_results_after_paper/edge-chance-tuning/70percent_clean.txt", header=TRUE, sep=" ")
edge_80percent =  read.csv(file="/home/andre/server-home/Hypergraphs/unicluster_results_after_paper/edge-chance-tuning/80percent_clean.txt", header=TRUE, sep=" ")
edge_90percent =  read.csv(file="/home/andre/server-home/Hypergraphs/unicluster_results_after_paper/edge-chance-tuning/90percent_clean.txt", header=TRUE, sep=" ")
edge_0percent =  read.csv(file="/home/andre/server-home/Hypergraphs/unicluster_results_after_paper/edge-chance-tuning/0percent_clean.txt", header=TRUE, sep=" ")
edge_100percent =  read.csv(file="/home/andre/server-home/Hypergraphs/unicluster_results_after_paper/edge-chance-tuning/100percent_clean.txt", header=TRUE, sep=" ")
mutation_nonforced_insertion_random_vcycles = read.csv(file="/home/andre/server-global_data/schlag/in_out/robin_local_results/mutation-uses-insertion-strategy/clean/mutation_uses_insertion_strategy_clean.txt", header=TRUE, sep=" ")
mutation_forced_insertion_random_vcycles = read.csv(file="/home/andre/server-global_data/schlag/in_out/robin_local_results/traditional_combine_and_vcycles/clean/random_vcycles_clean.txt", header=TRUE, sep=" ")
edge_frequency = read.csv(file="/home/andre/server-home/Hypergraphs/tuning/results/2hour_restart_dynamic_population/clean/random_combine_clean.txt", header=TRUE, sep=" ")
mutation_forced_insertion_vcycle = read.csv(file="/home/andre/server-global_data/schlag/in_out/robin_local_results/traditional_combine_and_vcycles/clean/traditional_combine_vcycle_clean.txt", header=TRUE, sep=" ")
mutation_forced_insertion_newip = read.csv(file="/home/andre/server-global_data/schlag/in_out/robin_local_results/traditional_combine_and_vcycles/clean/new_initial_partition_vcycle_clean.txt", header=TRUE, sep=" ")
traditional_combine_small = read.csv(file="/home/andre/server-home/Hypergraphs/tuning/results/2hour_restart_dynamic_population/clean/traditional_combine_clean.txt", header=TRUE, sep=" ")
k_crosscombine = read.csv(file="/home/andre/server-global_data/schlag/in_out/robin_local_results/cross-combine-debug/clean/k_clean.txt", header=TRUE, sep=" ")
epsilon_crosscombine = read.csv(file="/home/andre/server-global_data/schlag/in_out/robin_local_results/cross-combine-debug/clean/epsilon_clean.txt", header=TRUE, sep=" ")
mode_crosscombine = read.csv(file="/home/andre/server-global_data/schlag/in_out/robin_local_results/cross-combine-debug/clean/mode_clean.txt", header=TRUE, sep=" ")
objective_crosscombine = read.csv(file="/home/andre/server-global_data/schlag/in_out/robin_local_results/cross-combine-debug/clean/objective_clean.txt", header=TRUE, sep=" ")
louvain_crosscombine = read.csv(file="/home/andre/server-global_data/schlag/in_out/robin_local_results/cross-combine-debug/clean/louvain_clean.txt", header=TRUE, sep=" ")
nonevolutionary = read.csv(file="/home/andre/server-home/Hypergraphs/tuning/results/2hour_restart_dynamic_population/clean/nonevolutionary_clean.txt", header=TRUE, sep=" ")
nonevolutionary_vcycles = read.csv(file="/home/andre/server-home/Hypergraphs/tuning/results/2hour_restart_dynamic_population/clean/nonevolutionary_vcycles_clean.txt", header=TRUE, sep=" ")
random_combine = read.csv(file="/home/andre/server-home/Hypergraphs/tuning/results/2hour_restart_dynamic_population/clean/random_combine_clean.txt", header=TRUE, sep=" ")
temp <- aggregate(nonevolutionary$connectivity, by=list(nonevolutionary$name),min)
temp1 <-aggregate(random_combine$connectivity, by=list(random_combine$name), min)
temp2 <- aggregate(traditional_combine_small$connectivity, by=list(traditional_combine_small$name), min)
temp3 <- aggregate(nonevolutionary_vcycles$connectivity, by=list(nonevolutionary_vcycles$name), min)
temp <- plyr::rename(temp, c("x" = "nonevo"))
temp1 <- plyr::rename(temp1, c("x" = "C1C2"))
temp2 <- plyr::rename(temp1, c("x" = "C1"))
temp3 <- plyr::rename(temp1, c("x" = "nonevovcycles"))
result <- merge(temp, temp1)
result$maxdiff <- result$nonevo - result$C1C2
a <- sum(result$maxdiff)/75
b <- geoMean(result$nonevo)
a / b
library(coin)
wilcoxsign_test(result$nonevo ~
result$C1C2)
wilcoxsign_test(result$nonevovcycles ~
result$C1C2)
wilcoxsign_test(result$nonevovcycles ~
result$C1)
temp <- aggregate(nonevolutionary$connectivity, by=list(nonevolutionary$name),min)
temp1 <-aggregate(random_combine$connectivity, by=list(random_combine$name), min)
temp2 <- aggregate(traditional_combine_small$connectivity, by=list(traditional_combine_small$name), min)
temp3 <- aggregate(nonevolutionary_vcycles$connectivity, by=list(nonevolutionary_vcycles$name), min)
temp <- plyr::rename(temp, c("x" = "nonevo"))
temp1 <- plyr::rename(temp1, c("x" = "C1C2"))
temp2 <- plyr::rename(temp1, c("x" = "C1"))
temp3 <- plyr::rename(temp1, c("x" = "nonevovcycles"))
result <- merge(temp, temp1)
result <- merge(result, temp2)
result <- merge(result, temp3)
result$maxdiff <- result$nonevo - result$C1C2
a <- sum(result$maxdiff)/75
b <- geoMean(result$nonevo)
a / b
library(coin)
wilcoxsign_test(result$nonevo ~
result$C1C2)
wilcoxsign_test(result$nonevovcycles ~
result$C1C2)
wilcoxsign_test(result$nonevovcycles ~
result$C1)
temp <- aggregate(nonevolutionary$connectivity, by=list(nonevolutionary$name),min)
temp1 <-aggregate(random_combine$connectivity, by=list(random_combine$name), min)
temp2 <- aggregate(traditional_combine_small$connectivity, by=list(traditional_combine_small$name), min)
temp3 <- aggregate(nonevolutionary_vcycles$connectivity, by=list(nonevolutionary_vcycles$name), min)
temp <- plyr::rename(temp, c("x" = "nonevo"))
temp1 <- plyr::rename(temp1, c("x" = "C1C2"))
temp2 <- plyr::rename(temp1, c("x" = "C1"))
temp3 <- plyr::rename(temp1, c("x" = "nonevovcycles"))
result <- merge(temp, temp1)
result <- merge(result, temp2)
result <- merge(result, temp3)
View(result)
View(temp3)
View(temp2)
temp <- aggregate(nonevolutionary$connectivity, by=list(nonevolutionary$name),min)
temp1 <-aggregate(random_combine$connectivity, by=list(random_combine$name), min)
temp2 <- aggregate(traditional_combine_small$connectivity, by=list(traditional_combine_small$name), min)
temp3 <- aggregate(nonevolutionary_vcycles$connectivity, by=list(nonevolutionary_vcycles$name), min)
temp <- plyr::rename(temp, c("x" = "nonevo"))
temp1 <- plyr::rename(temp1, c("x" = "C1C2"))
temp2 <- plyr::rename(temp2, c("x" = "C1"))
temp3 <- plyr::rename(temp3, c("x" = "nonevovcycles"))
result <- merge(temp, temp1)
result <- merge(result, temp2)
result <- merge(result, temp3)
library(coin)
wilcoxsign_test(result$nonevo ~
result$C1C2)
wilcoxsign_test(result$nonevovcycles ~
result$C1C2)
wilcoxsign_test(result$nonevovcycles ~
result$C1)
wilcoxsign_test(result$nonevo ~
result$C1C2)
wilcoxsign_test(result$nonevovcycles ~
result$C1C2)
wilcoxsign_test(result$nonevovcycles ~
result$nonevo)
wilcoxsign_test(result$C1 ~
result$C1C2)
wilcoxsign_test(result$nonevovcycles ~
result$C1)
wilcoxsign_test(result$nonevovcycles ~
result$C1)
wilcoxsign_test(result$nonevovcycles ~
result$nonevo)
wilcoxsign_test(result$nonevovcycles ~
result$C1)
source('~/server-home/temppap/R/final_preprocessing.R')
tuning_20_rand_vcycle = read.csv(file="/home/andre/server-home/Hypergraphs/unicluster_results_after_paper/random_vcycles_and_edge_frequency_20percent_clean.txt", header=TRUE, sep=" ")
traditional_combine <- read.csv("/home/andre/server-home/temppap/R/effective/traditional_combine_clean.txt",
header=TRUE, sep=" ")
random_combine <- read.csv("/home/andre/server-home/temppap/R/effective/random_combine_clean.txt",
header=TRUE, sep=" ")
trad_vcycle_mutate = read.csv("/home/andre/server-home/temppap/R/effective/evolutionary_vcycle_clean.txt",
header=TRUE, sep=" ")
kahypar_ca_vcycle <- read.csv("/home/andre/server-home/temppap/R/final_data/vcycle_clean.txt",
header=TRUE, sep=" ")
kahypar_ca <- read.csv("/home/andre/server-home/temppap/R/final_data/final_nonevolutionary_clean.txt",
header=TRUE, sep=" ")
tuning_20 = read.csv(file="/home/andre/server-home/Hypergraphs/unicluster_results_after_paper/20percent_ultratuning_clean.txt", header=TRUE, sep=" ")
tuning_50 = read.csv(file="/home/andre/server-home/Hypergraphs/unicluster_results_after_paper/50percent_ultratuning_clean.txt", header=TRUE, sep=" ")
tuning_20_rand_vcycle = read.csv(file="/home/andre/server-home/Hypergraphs/unicluster_results_after_paper/random_vcycles_and_edge_frequency_20percent_clean.txt", header=TRUE, sep=" ")
#trad_newip_mutate = read.csv("/home/andre/server-home/Hypergraphs/unicluster_results_after_paper/50_50_benchmark_newip_clean.txt", header=TRUE, sep=" ")
################################
# undo factors
################################
traditional_combine$name <- as.character(traditional_combine$name)
random_combine$name <- as.character(random_combine$name)
trad_vcycle_mutate$name <- as.character(trad_vcycle_mutate$name)
kahypar_ca_vcycle$name <- as.character(kahypar_ca_vcycle$name)
kahypar_ca$name <- as.character(kahypar_ca$name)
tuning_20$name <- as.character(tuning_20$name)
tuning_50$name <- as.character(tuning_50$name)
tuning_20_rand_vcycle$name <- as.character(tuning_20_rand_vcycle$name)
#trad_newip_mutate$name <- as.character(trad_newip_mutate$name)
################################
# add graph classes
################################
traditional_combine$class <- as.factor(apply(traditional_combine, 1, function(x) graphclass(x)))
random_combine$class <- as.factor(apply(random_combine, 1, function(x) graphclass(x)))
trad_vcycle_mutate$class <- as.factor(apply(trad_vcycle_mutate, 1, function(x) graphclass(x)))
kahypar_ca_vcycle$class <- as.factor(apply(kahypar_ca_vcycle, 1, function(x) graphclass(x)))
kahypar_ca$class <- as.factor(apply(kahypar_ca, 1, function(x) graphclass(x)))
tuning_20$class <- as.factor(apply(tuning_20, 1, function(x) graphclass(x)))
tuning_50$class <- as.factor(apply(tuning_50, 1, function(x) graphclass(x)))
tuning_20_rand_vcycle$class <- as.factor(apply(tuning_20_rand_vcycle, 1, function(x) graphclass(x)))
#trad_newip_mutate$class <- as.factor(apply(trad_newip_mutate, 1, function(x) graphclass(x)))
################################
#### filter seed basline
################################
max_seed = 3
traditional_combine = traditional_combine[traditional_combine$seed <= max_seed,]
random_combine = random_combine[random_combine$seed <= max_seed,]
trad_vcycle_mutate = trad_vcycle_mutate[trad_vcycle_mutate$seed <= max_seed,]
kahypar_ca_vcycle = kahypar_ca_vcycle[kahypar_ca_vcycle$seed <= max_seed,]
kahypar_ca = kahypar_ca[kahypar_ca$seed <= max_seed,]
tuning_20 = tuning_20[tuning_20$seed <= max_seed,]
tuning_50 = tuning_50[tuning_50$seed <= max_seed,]
tuning_20_rand_vcycle = tuning_20_rand_vcycle[tuning_20_rand_vcycle$seed <= max_seed,]
#trad_newip_mutate = trad_newip_mutate[trad_newip_mutate$seed <= max_seed,]
################################
# find unique instances
################################
instances_traditional_combine = traditional_combine[!duplicated(traditional_combine[,c("name","k")]),]
instances_random_combine = random_combine[!duplicated(random_combine[,c("name","k")]),]
instances_trad_vcycle_mutate = trad_vcycle_mutate[!duplicated(trad_vcycle_mutate[,c("name","k")]),]
instances_kahypar_ca_vcycle = kahypar_ca_vcycle[!duplicated(kahypar_ca_vcycle[,c("name","k")]),]
instances_kahypar_ca = kahypar_ca[!duplicated(kahypar_ca[,c("name","k")]),]
instances_tuning_20 = tuning_20[!duplicated(tuning_20[,c("name","k")]),]
instances_tuning_50 = tuning_50[!duplicated(tuning_50[,c("name","k")]),]
instances_tuning_20_rand_vcycle = tuning_20_rand_vcycle[!duplicated(tuning_20_rand_vcycle[,c("name","k")]),]
#instances_trad_newip_mutate = trad_newip_mutate[!duplicated(trad_newip_mutate[,c("name","k")]),]
################################
# build a filter
################################
# first step: build filter for broken instances due to sparsifier
broken_instances = data.frame(name =c(rep("af_4_k101.mtx.hgr",7),
rep("af_shell1.mtx.hgr",7),
rep("BenElechi1.mtx.hgr",7),
rep("dielFilterV2clx.mtx.hgr",7),
rep("EternityII_A.mtx.hgr",7),
rep("gearbox.mtx.hgr",7),
rep("laminar_duct3D.mtx.hgr",7),
rep("mixtank_new.mtx.hgr",7),
rep("opt1.mtx.hgr",7),
rep("para-4.mtx.hgr",7),
rep("pdb1HYS.mtx.hgr",7),
rep("pkustk11.mtx.hgr",7),
rep("Pres_Poisson.mtx.hgr",7),
rep("rim.mtx.hgr",7),
rep("rma10.mtx.hgr",7),
rep("s4dkt3m2.mtx.hgr",7),
rep("sat14_atco_enc1_opt2_05_4.cnf.dual.hgr",7),
rep("sme3Db.mtx.hgr",7) ),
k = rep(c(2,4,8,16,32,64,128), 18),
connectivity = rep(0,126))
broken_instances$name <- as.character(broken_instances$name)
#build filter
semi_join_filter = semi_join(instances_random_combine, instances_traditional_combine, by=c('name','k'))
semi_join_filter = semi_join(semi_join_filter, instances_trad_vcycle_mutate, by=c('name','k'))
semi_join_filter = semi_join(semi_join_filter, instances_kahypar_ca_vcycle, by=c('name','k'))
semi_join_filter = semi_join(semi_join_filter, instances_kahypar_ca, by=c('name','k'))
semi_join_filter = semi_join(semi_join_filter, instances_tuning_20, by=c('name','k'))
semi_join_filter = semi_join(semi_join_filter, instances_tuning_50, by=c('name','k'))
semi_join_filter = semi_join(semi_join_filter, instances_tuning_20_rand_vcycle, by=c('name','k'))
#semi_join_filter = semi_join(semi_join_filter, instances_trad_newip_mutate, by=c('name','k'))
#### FILTER BROKEN INSTANCES
semi_join_filter = anti_join(semi_join_filter, broken_instances, by=c('name','k'))
################################
# extract the final benchmark set here
################################
all_instances = aggregate(semi_join_filter$k, by=list(semi_join_filter$name), sum)
all_instances$name = all_instances$Group.1
all_instances_dt <- data.table(all_instances, key=c("name"))
setkeyv(all_instances_dt, c("name"))
semi_join_filter$count = all_instances_dt[.(semi_join_filter$name)]$x
semi_join_filter = semi_join_filter[semi_join_filter$count == 254,]
used_instances = semi_join_filter[!duplicated(semi_join_filter[,c("name")]),]
#full_instance_stats = dbGetQuery(dbConnect(SQLite(), dbname="/global_data/schlag/00publication/sea17/full_benchmark_set_stats.db"),
#                                 "Select * from instances")
used_instances$graph = used_instances$name
#used_instances = merge(used_instances, full_instance_stats, by='graph')
# we drop the 3 smallest spm instances
used_instances = used_instances[used_instances$name != "psse2.mtx.hgr",]
used_instances = used_instances[used_instances$name != "coupled.mtx.hgr",]
used_instances = used_instances[used_instances$name != "ex19.mtx.hgr",]
used_dac = used_instances[used_instances$class == "DAC2012",]
used_ispd = used_instances[used_instances$class == "ISPD98",]
used_sat_prim = used_instances[used_instances$class == "SAT14primal",]
used_sat_dual = used_instances[used_instances$class == "SAT14dual",]
used_sat_lit = used_instances[used_instances$class == "SAT14literal",]
used_spm = used_instances[used_instances$class == "SPM",]
# and update the filter accordingly
semi_join_filter = semi_join_filter[semi_join_filter$name != "psse2.mtx.hgr", ]
semi_join_filter = semi_join_filter[semi_join_filter$name != "coupled.mtx.hgr", ]
semi_join_filter = semi_join_filter[semi_join_filter$name != "ex19.mtx.hgr", ]
stopifnot(count(semi_join_filter[semi_join_filter$class == "DAC2012",]) == 7 * count(used_dac))
stopifnot(count(semi_join_filter[semi_join_filter$class == "ISPD98",]) == 7 * count(used_ispd))
stopifnot(count(semi_join_filter[semi_join_filter$class == "SAT14primal",]) == 7 * count(used_sat_prim))
stopifnot(count(semi_join_filter[semi_join_filter$class == "SAT14dual",]) == 7 * count(used_sat_dual))
stopifnot(count(semi_join_filter[semi_join_filter$class == "SAT14literal",]) == 7 * count(used_sat_lit))
stopifnot(count(semi_join_filter[semi_join_filter$class == "SPM",]) == 7 * count(used_spm))
################################
# apply the semi_join_filter to all data frames
################################
traditional_combine = semi_join(traditional_combine, semi_join_filter, by=c('name','k'))
random_combine = semi_join(random_combine, semi_join_filter, by=c('name','k'))
trad_vcycle_mutate = semi_join(trad_vcycle_mutate, semi_join_filter, by=c('name','k'))
kahypar_ca_vcycle = semi_join(kahypar_ca_vcycle, semi_join_filter, by=c('name','k'))
kahypar_ca = semi_join(kahypar_ca, semi_join_filter, by=c('name','k'))
tuning_20 = semi_join(tuning_20, semi_join_filter, by=c('name','k'))
tuning_50 = semi_join(tuning_50, semi_join_filter, by=c('name','k'))
tuning_20_rand_vcycle = semi_join(tuning_20_rand_vcycle, semi_join_filter, by=c('name','k'))
#trad_newip_mutate = semi_join(trad_newip_mutate, semi_join_filter, by=c('name','k'))
################################
# maintain sort order
################################
traditional_combine = traditional_combine[with(traditional_combine, order(name,k,seed,iteration,time)), ]
random_combine = random_combine[with(random_combine, order(name,k,seed,iteration,time)), ]
trad_vcycle_mutate = trad_vcycle_mutate[with(trad_vcycle_mutate, order(name,k,seed,iteration,time)), ]
kahypar_ca_vcycle = kahypar_ca_vcycle[with(kahypar_ca_vcycle, order(name,k,seed,iteration,time)), ]
kahypar_ca = kahypar_ca[with(kahypar_ca, order(name,k,seed,iteration,time)), ]
tuning_20 = tuning_20[with(tuning_20, order(name,k,seed,iteration,time)), ]
tuning_50 = tuning_50[with(tuning_50, order(name,k,seed,iteration,time)), ]
tuning_20_rand_vcycle = tuning_20_rand_vcycle[with(tuning_20_rand_vcycle, order(name,k,seed,iteration,time)), ]
#trad_newip_mutate = trad_newip_mutate[with(trad_newip_mutate, order(name,k,seed,iteration,time)), ]
stopifnot(count(traditional_combine[!duplicated(traditional_combine[,c("name","k")]),]) ==
count(random_combine[!duplicated(random_combine[,c("name","k")]),]))
stopifnot(count(traditional_combine[!duplicated(traditional_combine[,c("name","k")]),]) ==
count(trad_vcycle_mutate[!duplicated(trad_vcycle_mutate[,c("name","k")]),]))
stopifnot(count(traditional_combine[!duplicated(traditional_combine[,c("name","k")]),]) ==
count(kahypar_ca_vcycle[!duplicated(kahypar_ca_vcycle[,c("name","k")]),]))
stopifnot(count(traditional_combine[!duplicated(traditional_combine[,c("name","k")]),]) ==
count(kahypar_ca[!duplicated(kahypar_ca[,c("name","k")]),]))
stopifnot(count(traditional_combine[!duplicated(traditional_combine[,c("name","k")]),]) ==
count(tuning_20[!duplicated(tuning_20[,c("name","k")]),]))
stopifnot(count(traditional_combine[!duplicated(traditional_combine[,c("name","k")]),]) ==
count(tuning_50[!duplicated(tuning_50[,c("name","k")]),]))
warning(paste("imalance > 0.03:", count(traditional_combine[traditional_combine$imbalance > 0.03,])))
warning(paste("imalance > 0.03:", count(random_combine[random_combine$imbalance > 0.03,])))
warning(paste("imalance > 0.03:", count(trad_vcycle_mutate[trad_vcycle_mutate$imbalance > 0.03,])))
warning(paste("imalance > 0.03:", count(kahypar_ca_vcycle[kahypar_ca_vcycle$imbalance > 0.03,])))
warning(paste("imalance > 0.03:", count(kahypar_ca[kahypar_ca$imbalance > 0.03,])))
dat = automaticPlot(list("C1" = tuning_20,
"C1C2" = tuning_20_rand_vcycle),
baselineTime(traditional_combine))
source("/home/andre/server-home/temppap/R/plot_functions.R")
dat = automaticPlot(list("C1" = tuning_20,
"C1C2" = tuning_20_rand_vcycle),
baselineTime(traditional_combine))
traditional_combine <- read.csv("/home/andre/server-home/temppap/R/effective/traditional_combine_clean.txt",
header=TRUE, sep=" ")
random_combine <- read.csv("/home/andre/server-home/temppap/R/effective/random_combine_clean.txt",
header=TRUE, sep=" ")
trad_vcycle_mutate = read.csv("/home/andre/server-home/temppap/R/effective/evolutionary_vcycle_clean.txt",
header=TRUE, sep=" ")
kahypar_ca_vcycle <- read.csv("/home/andre/server-home/temppap/R/final_data/vcycle_clean.txt",
header=TRUE, sep=" ")
kahypar_ca <- read.csv("/home/andre/server-home/temppap/R/final_data/final_nonevolutionary_clean.txt",
header=TRUE, sep=" ")
tuning_20 = read.csv(file="/home/andre/server-home/Hypergraphs/unicluster_results_after_paper/20percent_ultratuning_clean.txt", header=TRUE, sep=" ")
tuning_50 = read.csv(file="/home/andre/server-home/Hypergraphs/unicluster_results_after_paper/50percent_ultratuning_clean.txt", header=TRUE, sep=" ")
tuning_20_rand_vcycle = read.csv(file="/home/andre/server-home/Hypergraphs/unicluster_results_after_paper/random_vcycles_and_edge_frequency_20percent_clean.txt", header=TRUE, sep=" ")
traditional_combine$name <- as.character(traditional_combine$name)
random_combine$name <- as.character(random_combine$name)
trad_vcycle_mutate$name <- as.character(trad_vcycle_mutate$name)
kahypar_ca_vcycle$name <- as.character(kahypar_ca_vcycle$name)
kahypar_ca$name <- as.character(kahypar_ca$name)
tuning_20$name <- as.character(tuning_20$name)
tuning_50$name <- as.character(tuning_50$name)
tuning_20_rand_vcycle$name <- as.character(tuning_20_rand_vcycle$name)
traditional_combine$class <- as.factor(apply(traditional_combine, 1, function(x) graphclass(x)))
random_combine$class <- as.factor(apply(random_combine, 1, function(x) graphclass(x)))
trad_vcycle_mutate$class <- as.factor(apply(trad_vcycle_mutate, 1, function(x) graphclass(x)))
kahypar_ca_vcycle$class <- as.factor(apply(kahypar_ca_vcycle, 1, function(x) graphclass(x)))
kahypar_ca$class <- as.factor(apply(kahypar_ca, 1, function(x) graphclass(x)))
tuning_20$class <- as.factor(apply(tuning_20, 1, function(x) graphclass(x)))
tuning_50$class <- as.factor(apply(tuning_50, 1, function(x) graphclass(x)))
tuning_20_rand_vcycle$class <- as.factor(apply(tuning_20_rand_vcycle, 1, function(x) graphclass(x)))
################################
max_seed = 3
traditional_combine = traditional_combine[traditional_combine$seed <= max_seed,]
random_combine = random_combine[random_combine$seed <= max_seed,]
trad_vcycle_mutate = trad_vcycle_mutate[trad_vcycle_mutate$seed <= max_seed,]
kahypar_ca_vcycle = kahypar_ca_vcycle[kahypar_ca_vcycle$seed <= max_seed,]
kahypar_ca = kahypar_ca[kahypar_ca$seed <= max_seed,]
tuning_20 = tuning_20[tuning_20$seed <= max_seed,]
tuning_50 = tuning_50[tuning_50$seed <= max_seed,]
tuning_20_rand_vcycle = tuning_20_rand_vcycle[tuning_20_rand_vcycle$seed <= max_seed,]
instances_traditional_combine = traditional_combine[!duplicated(traditional_combine[,c("name","k")]),]
instances_random_combine = random_combine[!duplicated(random_combine[,c("name","k")]),]
instances_trad_vcycle_mutate = trad_vcycle_mutate[!duplicated(trad_vcycle_mutate[,c("name","k")]),]
instances_kahypar_ca_vcycle = kahypar_ca_vcycle[!duplicated(kahypar_ca_vcycle[,c("name","k")]),]
instances_kahypar_ca = kahypar_ca[!duplicated(kahypar_ca[,c("name","k")]),]
instances_tuning_20 = tuning_20[!duplicated(tuning_20[,c("name","k")]),]
instances_tuning_50 = tuning_50[!duplicated(tuning_50[,c("name","k")]),]
instances_tuning_20_rand_vcycle = tuning_20_rand_vcycle[!duplicated(tuning_20_rand_vcycle[,c("name","k")]),]
tuning_50 = read.csv(file="/home/andre/server-home/Hypergraphs/unicluster_results_after_paper/50percent_ultratuning_clean.txt", header=TRUE, sep=" ")
tuning_20 = read.csv(file="/home/andre/server-home/Hypergraphs/unicluster_results_after_paper/20percent_ultratuning_clean.txt", header=TRUE, sep=" ")
tuning_20_rand_vcycle = read.csv(file="/home/andre/server-home/Hypergraphs/unicluster_results_after_paper/random_vcycles_and_edge_frequency_20percent_clean.txt", header=TRUE, sep=" ")
tuning_20$name <- as.character(tuning_20$name)
tuning_20_rand_vcycle$name <- as.character(tuning_20_rand_vcycle$name)
tuning_20$class <- as.factor(apply(tuning_20, 1, function(x) graphclass(x)))
tuning_20_rand_vcycle$class <- as.factor(apply(tuning_20_rand_vcycle, 1, function(x) graphclass(x)))
max_seed = 3
tuning_20 = tuning_20[tuning_20$seed <= max_seed,]
tuning_20_rand_vcycle = tuning_20_rand_vcycle[tuning_20_rand_vcycle$seed <= max_seed,]
instances_tuning_20 = tuning_20[!duplicated(tuning_20[,c("name","k")]),]
instances_tuning_20_rand_vcycle = tuning_20_rand_vcycle[!duplicated(tuning_20_rand_vcycle[,c("name","k")]),]
broken_instances = data.frame(name =c(rep("af_4_k101.mtx.hgr",7),
rep("af_shell1.mtx.hgr",7),
rep("BenElechi1.mtx.hgr",7),
rep("dielFilterV2clx.mtx.hgr",7),
rep("EternityII_A.mtx.hgr",7),
rep("gearbox.mtx.hgr",7),
rep("laminar_duct3D.mtx.hgr",7),
rep("mixtank_new.mtx.hgr",7),
rep("opt1.mtx.hgr",7),
rep("para-4.mtx.hgr",7),
rep("pdb1HYS.mtx.hgr",7),
rep("pkustk11.mtx.hgr",7),
rep("Pres_Poisson.mtx.hgr",7),
rep("rim.mtx.hgr",7),
rep("rma10.mtx.hgr",7),
rep("s4dkt3m2.mtx.hgr",7),
rep("sat14_atco_enc1_opt2_05_4.cnf.dual.hgr",7),
rep("sme3Db.mtx.hgr",7) ),
k = rep(c(2,4,8,16,32,64,128), 18),
connectivity = rep(0,126))
broken_instances$name <- as.character(broken_instances$name)
semi_join_filter = semi_join(instances_tuning_20, instances_tuning_20_rand_vcycle, by=c('name','k'))
semi_join_filter = anti_join(semi_join_filter, broken_instances, by=c('name','k'))
tuning_20 = semi_join(tuning_20, semi_join_filter, by=c('name','k'))
tuning_20_rand_vcycle = semi_join(tuning_20_rand_vcycle, semi_join_filter, by=c('name','k'))
tuning_20 = tuning_20[with(tuning_20, order(name,k,seed,iteration,time)), ]
tuning_20_rand_vcycle = tuning_20_rand_vcycle[with(tuning_20_rand_vcycle, order(name,k,seed,iteration,time)), ]
dat = automaticPlot(list("C1" = tuning_20,
"C1C2" = tuning_20_rand_vcycle),
baselineTime(tuning_20))
data.table
dat = automaticPlot(list("C1" = tuning_20,
"C1C2" = tuning_20_rand_vcycle),
baselineTime(tuning_20))
source('~/server-home/temppap/R/final_preprocessing.R')
