

<<set-parent, echo=FALSE, cache=FALSE>>=
set_parent('../../bachelorarbeit.tex')
@

<<configure, echo=F,cache=FALSE>>=
library(knitr)
library(tikzDevice)
library(highlight)
knitr::opts_chunk$set(echo=F, eval=T, message = F, warning=F, cache = F, sanitize=T, fig=TRUE)
knit_hooks$set(crop=hook_pdfcrop)
## set global chunk options
opts_chunk$set(fig.path='./', cache.path='./cache/-', fig.align='center', fig.show='hold', par=TRUE)
## I use = but I can replace it with <-; set code/output width to be 68
options(formatR.arrow=TRUE, width=68, digits=4)
## tune details of base graphics (http://yihui.name/knitr/hooks)
knit_hooks$set(par=function(before, options, envir){
if (before && options$fig.show!='none') par(mar=c(4,4,.1,.1),cex.lab=.95,cex.axis=.9,mgp=c(2,.7,0),tcl=-.3) })
@

<<setup, echo=F,sanitize=T>>=
source("/home/andre/server-home/temppap/R/plot_functions.R")
source("/home/andre/server-home/temppap/R/final_preprocessing.R")
@

\begin{figure}
\centering
 <<edge_tuning_plot,dev='tikz',dev.args=list(pointsize=10),,fig.width=6,fig.height=4,out.width='\\textwidth',fig.show='hold', crop=TRUE,sanitize=F>>=
#par(mar=c(4, 4, 1, .1), mgp=c(2,1,0))

edge_10percent =  read.csv(file="/home/andre/server-home/Hypergraphs/unicluster_results_after_paper/edge-chance-tuning/10percent_clean.txt", header=TRUE, sep=" ")
edge_20percent =  read.csv(file="/home/andre/server-home/Hypergraphs/unicluster_results_after_paper/edge-chance-tuning/20percent_clean.txt", header=TRUE, sep=" ")
edge_30percent =  read.csv(file="/home/andre/server-home/Hypergraphs/unicluster_results_after_paper/edge-chance-tuning/30percent_clean.txt", header=TRUE, sep=" ")
edge_40percent =  read.csv(file="/home/andre/server-home/Hypergraphs/unicluster_results_after_paper/edge-chance-tuning/40percent_clean.txt", header=TRUE, sep=" ")
edge_50percent =  read.csv(file="/home/andre/server-home/Hypergraphs/unicluster_results_after_paper/edge-chance-tuning/50percent_clean.txt", header=TRUE, sep=" ")
edge_60percent =  read.csv(file="/home/andre/server-home/Hypergraphs/unicluster_results_after_paper/edge-chance-tuning/60percent_clean.txt", header=TRUE, sep=" ")
edge_70percent =  read.csv(file="/home/andre/server-home/Hypergraphs/unicluster_results_after_paper/edge-chance-tuning/70percent_clean.txt", header=TRUE, sep=" ")
edge_80percent =  read.csv(file="/home/andre/server-home/Hypergraphs/unicluster_results_after_paper/edge-chance-tuning/80percent_clean.txt", header=TRUE, sep=" ")
edge_90percent =  read.csv(file="/home/andre/server-home/Hypergraphs/unicluster_results_after_paper/edge-chance-tuning/90percent_clean.txt", header=TRUE, sep=" ")
edge_0percent =  read.csv(file="/home/andre/server-home/Hypergraphs/unicluster_results_after_paper/edge-chance-tuning/0percent_clean.txt", header=TRUE, sep=" ")
edge_100percent =  read.csv(file="/home/andre/server-home/Hypergraphs/unicluster_results_after_paper/edge-chance-tuning/100percent_clean.txt", header=TRUE, sep=" ")


traditional_combine = read.csv(file="/home/andre/server-home/Hypergraphs/tuning/results/2hour_restart_dynamic_population/clean/traditional_combine_clean.txt", header=TRUE, sep=" ")
basline_dt = computeSequentialBaselineTime(traditional_combine)

data = automaticPlot(list("KaHyPar-E + C1" = traditional_combine,
                          "0.1" = edge_10percent,
                          "0.2" = edge_20percent,
                          "0.3" = edge_30percent,
                          "0.4" = edge_40percent,
                          "0.5" = edge_50percent,
                          "0.6" = edge_60percent,
                          "0.7" = edge_70percent,
                          "0.8" = edge_80percent,
                          "0.9" = edge_90percent,
                          #"CA" = edge_0percent,
                          "KaHyPar-E + C2" = edge_100percent),
                     computeSequentialBaselineTime(traditional_combine))
colors=c("CA" = "#000000", "CA-V" = "#888888", "E+C1" = "#ff0000", "KaHyPar-E + C1" = "#0000ff", "KaHyPar-CA" = "#000000", "KaHyPar-CA+vcycle" = "#aaaa00", "KaHyPar-E + C1 + C2" = "#00ff00", "KaHyPar-E + C1 + M1" = "#ff0000", "KaHyPar-E + C1 + M2 " = "#00ff00","KaHyPar-E + C1 + M2 diverse" = "#008800", "KaHyPar-E + C1 + M3" = "#0000ff", "KaHyPar-E + C1 + M1 + M2 " = "#ffff00", "KaHyPar-E + C1 + M1 + M2 diverse" = "#888800")
colors = c("KaHyPar-E + C1" = "#a50026",
                          "0.1" = "#081d58",
                          "0.2" = "#253494",
                          "0.3" = "#225ea8",
                          "0.4" = "#1d91c0",
                          "0.5" = "#41b6c4",
                          "0.6" = "#7fcdbb",
                          "0.7" = "#c7e9b4",
                          "0.8" = "#edf8b1",
                          "0.9" = "#ffffd9",
                          "KaHyPar-E + C2" = "#006837")
                          #"CA" = "#000000")
#ffffd9
#edf8b1
#c7e9b4
#7fcdbb
#41b6c4
#1d91c0
#225ea8
#253494
#081d58
convergencePlot(data, legendPos = c(0.2,0.2), title="",legendcol = 2,colors)
#ggplot(data, aes(x=t, y=best, color=algorithm)) +
  #geom_line() +
 # scale_x_continuous(trans = "log", breaks = c(1,2,5,10,20,50,100,200,500,1000,2000,5000)) +
  #scale_y_continuous(breaks = pretty_breaks(n=5))
library(gridExtra)
library(grid)
library(ggplot2)
library(lattice)

#devtools::install_github("baptiste/egg") 
#grid.draw(egg::ggarrange(plots=plots, ncol=2, nrow=4))



@
\caption{Convergence plots for different values of $k$.}
\end{figure}




