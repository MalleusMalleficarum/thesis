<<set-parent, echo=FALSE, cache=FALSE>>=
set_parent('../bachelorarbeit.tex')
@

<<configure, echo=F,cache=FALSE>>=
library(knitr)
library(tikzDevice)
library(highlight)
knitr::opts_chunk$set(echo=F, eval=T, message = F, warning=F, cache = F, sanitize=T, fig=TRUE)
#knit_hooks$set(crop=hook_pdfcrop)
## set global chunk options
opts_chunk$set(fig.path='./', cache.path='./cache/-', fig.align='center', fig.show='hold',fig.width=20, fig.height=12, par=TRUE)
## I use = but I can replace it with <-; set code/output width to be 68
options(formatR.arrow=TRUE, width=68, digits=4)
## tune details of base graphics (http://yihui.name/knitr/hooks)
#knit_hooks$set(par=function(before, options, envir){
#if (before && options$fig.show!='none') par(mar=c(4,4,.1,.1),cex.lab=.95,cex.axis=.9,mgp=c(2,.7,0),tcl=-.3) })
@

<<setup, echo=F,sanitize=T>>=
source("/home/andre/server-home/temppap/R/plot_functions.R")
source("/home/andre/server-home/temppap/R/final_preprocessing.R")
@

\begin{figure}
\centering
 <<appendix_convergence,dev='tikz',dev.args=list(pointsize=10),,fig.width=12,fig.height=8,out.width='\\textwidth',fig.show='hold', crop=TRUE,sanitize=F>>=
#par(mar=c(4, 4, 1, .1), mgp=c(2,1,0))
k=2
data2 = automaticPlot(list("EvoHGP$+C+ER$" = random_combine[random_combine$k == k,],
                                   "KaHyPar-CA" = kahypar_ca[kahypar_ca$k == k,],
                                   "KaHyPar-CA-V" = kahypar_ca_vcycle[kahypar_ca_vcycle$k == k,],
                                   "EvoHGP$+C+M_{0.5}$" = trad_vcycle_mutate[trad_vcycle_mutate$k == k,]),
                              baselineTime(traditional_combine[traditional_combine$k == k,]))
data2$algorithm <- factor(data2$algorithm, levels = c("KaHyPar-CA","EvoHGP$+C+ER$", "KaHyPar-CA-V", "EvoHGP$+C+M_{0.5}$"))
a = convergencePlot2(data2, legendPos = c(0.75,0.75), title="$k=2$", legendcol=1)
k=4
data4 = automaticPlot(list("EvoHGP$+C+ER$" = random_combine[random_combine$k == k,],
                                   "KaHyPar-CA" = kahypar_ca[kahypar_ca$k == k,],
                                   "KaHyPar-CA-V" = kahypar_ca_vcycle[kahypar_ca_vcycle$k == k,],
                                   "EvoHGP$+C+M_{0.5}$" = trad_vcycle_mutate[trad_vcycle_mutate$k == k,]),
                              baselineTime(traditional_combine[traditional_combine$k == k,]))
data4$algorithm <- factor(data4$algorithm, levels = c("KaHyPar-CA","EvoHGP$+C+ER$", "KaHyPar-CA-V", "EvoHGP$+C+M_{0.5}$"))
b = convergencePlot2(data4, legendPos = c(0.75,0.75), title="$k=4$", legendcol=1)

k=8
data8 = automaticPlot(list("EvoHGP$+C+ER$" = random_combine[random_combine$k == k,],
                                   "KaHyPar-CA" = kahypar_ca[kahypar_ca$k == k,],
                                   "KaHyPar-CA-V" = kahypar_ca_vcycle[kahypar_ca_vcycle$k == k,],
                                   "EvoHGP$+C+M_{0.5}$" = trad_vcycle_mutate[trad_vcycle_mutate$k == k,]),
                              baselineTime(traditional_combine[traditional_combine$k == k,]))
data8$algorithm <- factor(data8$algorithm, levels = c("KaHyPar-CA", "KaHyPar-CA-V", "EvoHGP$+C+ER$","EvoHGP$+C+M_{0.5}$"))
c = convergencePlot2(data8, legendPos = c(0.75,0.75), title="$k=8$", legendcol = 1)

k=16
data16 = automaticPlot(list("EvoHGP$+C+ER$" = random_combine[random_combine$k == k,],
                                   "KaHyPar-CA" = kahypar_ca[kahypar_ca$k == k,],
                                   "KaHyPar-CA-V" = kahypar_ca_vcycle[kahypar_ca_vcycle$k == k,],
                                   "EvoHGP$+C+M_{0.5}$" = trad_vcycle_mutate[trad_vcycle_mutate$k == k,]),
                              baselineTime(traditional_combine[traditional_combine$k == k,]))
data16$algorithm <- factor(data16$algorithm, levels = c("KaHyPar-CA", "KaHyPar-CA-V", "EvoHGP$+C+ER$","EvoHGP$+C+M_{0.5}$"))
d = convergencePlot2(data16, legendPos = c(0.75,0.75), title="$k=16$", legendcol = 1)
k=32
data32 = automaticPlot(list("EvoHGP$+C+ER$" = random_combine[random_combine$k == k,],
                                   "KaHyPar-CA" = kahypar_ca[kahypar_ca$k == k,],
                                   "KaHyPar-CA-V" = kahypar_ca_vcycle[kahypar_ca_vcycle$k == k,],
                                   "EvoHGP$+C+M_{0.5}$" = trad_vcycle_mutate[trad_vcycle_mutate$k == k,]),
                              baselineTime(traditional_combine[traditional_combine$k == k,]))
data32$algorithm <- factor(data32$algorithm, levels = c("KaHyPar-CA","EvoHGP$+C+ER$", "KaHyPar-CA-V", "EvoHGP$+C+M_{0.5}$"))
e = convergencePlot2(data32, legendPos = c(0.75,0.75), title="$k=32$", legendcol=1)
k=64
data64 = automaticPlot(list("EvoHGP$+C+ER$" = random_combine[random_combine$k == k,],
                                   "KaHyPar-CA" = kahypar_ca[kahypar_ca$k == k,],
                                   "KaHyPar-CA-V" = kahypar_ca_vcycle[kahypar_ca_vcycle$k == k,],
                                   "EvoHGP$+C+M_{0.5}$" = trad_vcycle_mutate[trad_vcycle_mutate$k == k,]),
                              baselineTime(traditional_combine[traditional_combine$k == k,]))
data64$algorithm <- factor(data64$algorithm, levels = c("KaHyPar-CA", "KaHyPar-CA-V", "EvoHGP$+C+ER$",  "EvoHGP$+C+M_{0.5}$"))
f = convergencePlot2(data64, legendPos = c(0.25,0.25), title="$k=64$", legendcol=1)
k=128
data128 = automaticPlot(list("EvoHGP$+C+ER$" = random_combine[random_combine$k == k,],
                                   "KaHyPar-CA" = kahypar_ca[kahypar_ca$k == k,],
                                   "KaHyPar-CA-V" = kahypar_ca_vcycle[kahypar_ca_vcycle$k == k,],
                                   "EvoHGP$+C+M_{0.5}$" = trad_vcycle_mutate[trad_vcycle_mutate$k == k,]),
                              baselineTime(traditional_combine[traditional_combine$k == k,]))
data128$algorithm <- factor(data128$algorithm, levels = c("KaHyPar-CA","EvoHGP$+C+ER$", "KaHyPar-CA-V", "EvoHGP$+C+M_{0.5}$"))
g = convergencePlot2(data4, legendPos = c(0.75,0.75), title="$k=128$", legendcol=1)

library(gridExtra)
library(grid)
library(ggplot2)
library(lattice)

#devtools::install_github("baptiste/egg") 
#grid.draw(egg::ggarrange(plots=plots, ncol=2, nrow=4))
grid.arrange(a,b,c,d, ncol=2)
grid.arrange(e,f,g,ncol=2)


@
\caption{Convergence plots for different values of $k$.}
\end{figure}